// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using server.src.Data;

#nullable disable

namespace server.Migrations
{
    [DbContext(typeof(ServerDbContext))]
    partial class ServerDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            MySqlModelBuilderExtensions.AutoIncrementColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("longtext");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasMaxLength(13)
                        .HasColumnType("varchar(13)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("longtext");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("longtext");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("longtext");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasDiscriminator().HasValue("IdentityUser");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("longtext");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("RoleId")
                        .HasColumnType("varchar(255)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Value")
                        .HasColumnType("longtext");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("server.src.Models.PasswordResetCodeModel", b =>
                {
                    b.Property<ulong>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint unsigned")
                        .HasColumnName("Id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<ulong>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("varchar(6)")
                        .HasColumnName("Code");

                    b.Property<DateTime>("ExpiresAt")
                        .HasColumnType("datetime")
                        .HasColumnName("ExpiresAt");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(500)")
                        .HasColumnName("UserId");

                    b.HasKey("Id");

                    b.ToTable("tbPasswordResetCode", (string)null);
                });

            modelBuilder.Entity("server.src.Models.SettingsAcademicYearModel", b =>
                {
                    b.Property<uint>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int unsigned")
                        .HasColumnName("Id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<uint>("Id"));

                    b.Property<int>("Day")
                        .HasColumnType("int")
                        .HasColumnName("Day");

                    b.Property<string>("Month")
                        .IsRequired()
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Month");

                    b.Property<int>("Year")
                        .HasColumnType("int")
                        .HasColumnName("Year");

                    b.HasKey("Id");

                    b.ToTable("tbSettingsAcademicYear", (string)null);
                });

            modelBuilder.Entity("server.src.Models.SettingsAmountMtModel", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Id");

                    b.Property<decimal>("AmountMT")
                        .HasColumnType("decimal(10,2)")
                        .HasColumnName("AmountMT");

                    b.HasKey("Id");

                    b.ToTable("tbSettingsAmountMt", (string)null);
                });

            modelBuilder.Entity("server.src.Models.SettingsMonthlyTuitionModel", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Id");

                    b.Property<decimal>("Intensive")
                        .HasColumnType("decimal(10,2)")
                        .HasColumnName("Intensive");

                    b.Property<decimal>("Private")
                        .HasColumnType("decimal(10,2)")
                        .HasColumnName("Private");

                    b.Property<decimal>("Regular")
                        .HasColumnType("decimal(10,2)")
                        .HasColumnName("Regular");

                    b.HasKey("Id");

                    b.ToTable("tbSettingsMonthlyTuition", (string)null);
                });

            modelBuilder.Entity("server.src.Models.SettingsWeeklyScheduleModel", b =>
                {
                    b.Property<uint>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int unsigned")
                        .HasColumnName("Id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<uint>("Id"));

                    b.Property<string>("Monday")
                        .IsRequired()
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Monday");

                    b.Property<string>("Thursday")
                        .IsRequired()
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Thursday");

                    b.Property<string>("Tuesday")
                        .IsRequired()
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Tuesday");

                    b.Property<string>("Wednesday")
                        .IsRequired()
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Wednesday");

                    b.HasKey("Id");

                    b.ToTable("tbSettingsWeeklySchedule", (string)null);
                });

            modelBuilder.Entity("server.src.Models.StudentCourseInfoModel", b =>
                {
                    b.Property<ulong>("Order")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint unsigned")
                        .HasColumnName("Order");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<ulong>("Order"));

                    b.Property<string>("AcademicPeriod")
                        .IsRequired()
                        .HasColumnType("varchar(50)")
                        .HasColumnName("AcademicPeriod");

                    b.Property<string>("CourseName")
                        .IsRequired()
                        .HasColumnType("varchar(50)")
                        .HasColumnName("CourseName");

                    b.Property<DateTime>("DateUpdate")
                        .HasColumnType("datetime")
                        .HasColumnName("DateUpdate");

                    b.Property<string>("Duration")
                        .IsRequired()
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Duration");

                    b.Property<decimal>("Exam")
                        .HasColumnType("decimal(10,2)")
                        .HasColumnName("Exam");

                    b.Property<decimal>("FinalAverage")
                        .HasColumnType("decimal(10,2)")
                        .HasColumnName("FinalAverage");

                    b.Property<string>("Id")
                        .IsRequired()
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Id");

                    b.Property<string>("Level")
                        .IsRequired()
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Level");

                    b.Property<string>("Modality")
                        .IsRequired()
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Modality");

                    b.Property<decimal>("MonthlyFee")
                        .HasColumnType("decimal(10,2)")
                        .HasColumnName("MonthlyFee");

                    b.Property<string>("Package")
                        .IsRequired()
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Package");

                    b.Property<decimal>("QuizOne")
                        .HasColumnType("decimal(10,2)")
                        .HasColumnName("QuizOne");

                    b.Property<decimal>("QuizTwo")
                        .HasColumnType("decimal(10,2)")
                        .HasColumnName("QuitTwo");

                    b.Property<string>("Schedule")
                        .IsRequired()
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Schedule");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Status");

                    b.Property<string>("StudentId")
                        .IsRequired()
                        .HasColumnType("varchar(50)")
                        .HasColumnName("StudentId");

                    b.Property<string>("TrainerName")
                        .IsRequired()
                        .HasColumnType("varchar(50)")
                        .HasColumnName("TrainerName");

                    b.HasKey("Order");

                    b.HasIndex("Id")
                        .IsUnique();

                    b.HasIndex("StudentId");

                    b.ToTable("tbStudentCourseInfo", (string)null);
                });

            modelBuilder.Entity("server.src.Models.StudentDataModel", b =>
                {
                    b.Property<ulong>("Order")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint unsigned")
                        .HasColumnName("Order");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<ulong>("Order"));

                    b.Property<string>("AdditionalNotes")
                        .IsRequired()
                        .HasColumnType("varchar(120)")
                        .HasColumnName("AdditionalNotes");

                    b.Property<string>("DateOfBirth")
                        .IsRequired()
                        .HasColumnType("varchar(50)")
                        .HasColumnName("DateOfBirth");

                    b.Property<DateTime>("DateOfBirthCalc")
                        .HasColumnType("datetime")
                        .HasColumnName("DateOfBirthCalc");

                    b.Property<DateTime>("DateUpdate")
                        .HasColumnType("datetime")
                        .HasColumnName("DateUpdate");

                    b.Property<string>("DocumentType")
                        .IsRequired()
                        .HasColumnType("varchar(50)")
                        .HasColumnName("DocumentType");

                    b.Property<string>("EmailAddress")
                        .IsRequired()
                        .HasColumnType("varchar(50)")
                        .HasColumnName("EmailAdress");

                    b.Property<string>("ExpirationDate")
                        .IsRequired()
                        .HasColumnType("varchar(50)")
                        .HasColumnName("ExpirationDate");

                    b.Property<string>("FirstPhoneNumber")
                        .IsRequired()
                        .HasColumnType("varchar(50)")
                        .HasColumnName("FirstPhoneNumber");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("varchar(50)")
                        .HasColumnName("FullName");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Gender");

                    b.Property<string>("GuardEmailAddress")
                        .IsRequired()
                        .HasColumnType("varchar(50)")
                        .HasColumnName("GuardEmailAddress");

                    b.Property<string>("GuardFirstPhoneNumber")
                        .IsRequired()
                        .HasColumnType("varchar(50)")
                        .HasColumnName("GuardFirstPhoneNumber");

                    b.Property<string>("GuardFullName")
                        .IsRequired()
                        .HasColumnType("varchar(50)")
                        .HasColumnName("GuardFullName");

                    b.Property<string>("GuardRelationship")
                        .IsRequired()
                        .HasColumnType("varchar(50)")
                        .HasColumnName("GuardRelationship");

                    b.Property<string>("GuardResidentialAddress")
                        .IsRequired()
                        .HasColumnType("varchar(50)")
                        .HasColumnName("GuardResidentialAddress");

                    b.Property<string>("GuardSecondPhoneNumber")
                        .IsRequired()
                        .HasColumnType("varchar(50)")
                        .HasColumnName("GuardSecondPhoneNumber");

                    b.Property<string>("Id")
                        .IsRequired()
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Id");

                    b.Property<string>("IdNumber")
                        .IsRequired()
                        .HasColumnType("varchar(50)")
                        .HasColumnName("IdNumber");

                    b.Property<string>("MaritalStatus")
                        .IsRequired()
                        .HasColumnType("varchar(50)")
                        .HasColumnName("MaritalStatus");

                    b.Property<string>("Nationality")
                        .IsRequired()
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Nationality");

                    b.Property<string>("PlaceOfBirth")
                        .IsRequired()
                        .HasColumnType("varchar(50)")
                        .HasColumnName("PlaceOfBirth");

                    b.Property<string>("PlaceOfIssue")
                        .IsRequired()
                        .HasColumnType("varchar(50)")
                        .HasColumnName("PlaceOfIssue");

                    b.Property<string>("ResidentialAddress")
                        .IsRequired()
                        .HasColumnType("varchar(50)")
                        .HasColumnName("ResidentialAddress");

                    b.Property<string>("SecondPhoneNumber")
                        .IsRequired()
                        .HasColumnType("varchar(50)")
                        .HasColumnName("SecondPhoneNumber");

                    b.Property<string>("TrainerName")
                        .IsRequired()
                        .HasColumnType("varchar(50)")
                        .HasColumnName("TrainerName");

                    b.HasKey("Order");

                    b.HasIndex("FullName")
                        .IsUnique();

                    b.HasIndex("Id")
                        .IsUnique();

                    b.ToTable("tbStudentData", (string)null);
                });

            modelBuilder.Entity("server.src.Models.StudentEnrollmentFormModel", b =>
                {
                    b.Property<string>("StudentId")
                        .HasColumnType("varchar(50)")
                        .HasColumnName("StudentId");

                    b.Property<string>("AcademicPeriod")
                        .IsRequired()
                        .HasColumnType("varchar(50)")
                        .HasColumnName("AcademicPeriod");

                    b.Property<int>("Age")
                        .HasColumnType("int")
                        .HasColumnName("Age");

                    b.Property<decimal>("CourseFee")
                        .HasColumnType("decimal(10,2)")
                        .HasColumnName("CourseFee");

                    b.Property<string>("CourseName")
                        .IsRequired()
                        .HasColumnType("varchar(50)")
                        .HasColumnName("CourseName");

                    b.Property<string>("Days")
                        .IsRequired()
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Days");

                    b.Property<string>("Duration")
                        .IsRequired()
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Duration");

                    b.Property<decimal>("Installments")
                        .HasColumnType("decimal(10,2)")
                        .HasColumnName("Installments");

                    b.Property<string>("Level")
                        .IsRequired()
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Level");

                    b.Property<string>("Modality")
                        .IsRequired()
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Modality");

                    b.Property<decimal>("MonthlyFee")
                        .HasColumnType("decimal(10,2)")
                        .HasColumnName("MonthlyFee");

                    b.Property<string>("Months")
                        .IsRequired()
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Months");

                    b.Property<string>("Package")
                        .IsRequired()
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Package");

                    b.Property<string>("Schedule")
                        .IsRequired()
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Schedule");

                    b.Property<string>("Times")
                        .IsRequired()
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Times");

                    b.Property<string>("TrainerName")
                        .IsRequired()
                        .HasColumnType("varchar(50)")
                        .HasColumnName("TrainerName");

                    b.Property<string>("Years")
                        .IsRequired()
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Years");

                    b.HasKey("StudentId");

                    b.ToTable("tbStudentEnrollmentForm", (string)null);
                });

            modelBuilder.Entity("server.src.Models.StudentPaymentModel", b =>
                {
                    b.Property<ulong>("Order")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint unsigned")
                        .HasColumnName("Order");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<ulong>("Order"));

                    b.Property<decimal>("AmountMT")
                        .HasColumnType("decimal(10,2)")
                        .HasColumnName("AmountMT");

                    b.Property<DateTime>("DateRegister")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("DateRegister")
                        .HasDefaultValueSql("current_timestamp");

                    b.Property<string>("Days")
                        .IsRequired()
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Days");

                    b.Property<string>("DescriptionEnglish")
                        .IsRequired()
                        .HasColumnType("varchar(50)")
                        .HasColumnName("DescriptionEnglish");

                    b.Property<string>("DescriptionPortuguese")
                        .IsRequired()
                        .HasColumnType("varchar(50)")
                        .HasColumnName("DescriptionPortuguese");

                    b.Property<string>("Id")
                        .IsRequired()
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Id");

                    b.Property<string>("InWords")
                        .IsRequired()
                        .HasColumnType("varchar(50)")
                        .HasColumnName("InWords");

                    b.Property<string>("Method")
                        .IsRequired()
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Method");

                    b.Property<string>("Months")
                        .IsRequired()
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Months");

                    b.Property<string>("PaymentType")
                        .IsRequired()
                        .HasColumnType("varchar(50)")
                        .HasColumnName("PaymentType");

                    b.Property<string>("ReceivedFrom")
                        .IsRequired()
                        .HasColumnType("varchar(50)")
                        .HasColumnName("ReceivedFrom");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Status");

                    b.Property<string>("StudentId")
                        .IsRequired()
                        .HasColumnType("varchar(50)")
                        .HasColumnName("StudentId");

                    b.Property<string>("Times")
                        .IsRequired()
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Times");

                    b.Property<string>("TrainerId")
                        .IsRequired()
                        .HasColumnType("varchar(50)")
                        .HasColumnName("TrainerId");

                    b.Property<string>("TrainerName")
                        .IsRequired()
                        .HasColumnType("varchar(50)")
                        .HasColumnName("TrainerName");

                    b.Property<string>("Years")
                        .IsRequired()
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Years");

                    b.HasKey("Order");

                    b.HasIndex("Id")
                        .IsUnique();

                    b.HasIndex("StudentId");

                    b.HasIndex("TrainerId");

                    b.ToTable("tbStudentPayment", (string)null);
                });

            modelBuilder.Entity("server.src.Models.TrainerModel", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityUser");

                    b.Property<DateTime>("DateRegister")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("DateRegister")
                        .HasDefaultValueSql("current_timestamp");

                    b.Property<DateTime?>("DateUpdate")
                        .HasColumnType("datetime")
                        .HasColumnName("DateUpdate");

                    b.Property<string>("FullName")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Position")
                        .HasColumnType("longtext");

                    b.Property<string>("ProfileImage")
                        .HasColumnType("longtext");

                    b.Property<string>("RefreshToken")
                        .HasColumnType("longtext");

                    b.Property<DateTime>("RefreshTokenExpiryTime")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<decimal>("SubsidyMT")
                        .HasPrecision(10, 2)
                        .HasColumnType("decimal(10,2)");

                    b.HasIndex("FullName");

                    b.HasIndex("Status");

                    b.HasDiscriminator().HasValue("TrainerModel");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("server.src.Models.StudentCourseInfoModel", b =>
                {
                    b.HasOne("server.src.Models.StudentDataModel", "StudentData")
                        .WithMany("CourseInfo")
                        .HasForeignKey("StudentId")
                        .HasPrincipalKey("Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("StudentData");
                });

            modelBuilder.Entity("server.src.Models.StudentEnrollmentFormModel", b =>
                {
                    b.HasOne("server.src.Models.StudentDataModel", "StudentData")
                        .WithOne("EnrollmentForm")
                        .HasForeignKey("server.src.Models.StudentEnrollmentFormModel", "StudentId")
                        .HasPrincipalKey("server.src.Models.StudentDataModel", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("StudentData");
                });

            modelBuilder.Entity("server.src.Models.StudentPaymentModel", b =>
                {
                    b.HasOne("server.src.Models.StudentDataModel", "StudentData")
                        .WithMany("Payments")
                        .HasForeignKey("StudentId")
                        .HasPrincipalKey("Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("server.src.Models.TrainerModel", "Trainer")
                        .WithMany("Payments")
                        .HasForeignKey("TrainerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("StudentData");

                    b.Navigation("Trainer");
                });

            modelBuilder.Entity("server.src.Models.StudentDataModel", b =>
                {
                    b.Navigation("CourseInfo");

                    b.Navigation("EnrollmentForm");

                    b.Navigation("Payments");
                });

            modelBuilder.Entity("server.src.Models.TrainerModel", b =>
                {
                    b.Navigation("Payments");
                });
#pragma warning restore 612, 618
        }
    }
}
